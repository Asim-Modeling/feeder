#
#  Copyright (C) 2003-2006 Intel Corporation
#  
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#  
#

##########################################################################
#
# Makefile for populating the softsdv directory at the top level of the
# build with client side libraries to be loaded into the softsdv process.
# The client side code is built here because it must be kept in sync with
# the Asim side of the interface.
#
# This Makefile handles all ISAs.  It determines which ISA specific files
# to include in the libraries based on the target name.
#
# This makefile is generated for:
#   $REPLACE$PmName
#   $REPLACE$PmDesc
#
# Author: Michael Adler
#
##########################################################################

#-----------------------------------------------------------------------------
# set defaults for make configuration
#-----------------------------------------------------------------------------
GNU = $REPLACE$GNU
OPT = $REPLACE$OPT
DEBUG = $REPLACE$DEBUG
STATIC = $REPLACE$STATIC
WARN = 0
PAR = $REPLACE$PAR
COMMON_LFLAGS:=$REPLACE$COMMON_LFLAGS
LOCAL_LFLAGS:=$REPLACE$LOCAL_LFLAGS
LOCAL_CFLAGS:=$REPLACE$LOCAL_CFLAGS

#-----------------------------------------------------------------------------
# top-level make configuration
#-----------------------------------------------------------------------------
include $REPLACE$MAKEFILECONFIG

#-----------------------------------------------------------------------------
# includes and defines
#-----------------------------------------------------------------------------
ASIM_INCDIRS=$REPLACE$INCDIRS
SRCDIR=src

#-----------------------------------------------------------------------------
# root of build tree
#-----------------------------------------------------------------------------
BUILDROOT = $REPLACE$BUILDROOT
BUILDABSROOT = $REPLACE$BUILDABSROOT

#-----------------------------------------------------------------------------
# TARGET and required components
#-----------------------------------------------------------------------------
TARGET=$REPLACE$TARGET

#-----------------------------------------------------------------------------
# paths to sources
#-----------------------------------------------------------------------------
VPATH=$(SRCDIR)
GNUDIR = $(SRCDIR)

#-----------------------------------------------------------------------------
# What's the target ISA?
#-----------------------------------------------------------------------------
SOFTSDV_ISA = $(shell echo $(TARGET) | sed -e s/softsdv_support_//)
SOFTSDV_ISA := $(SOFTSDV_ISA:.a=)

#-----------------------------------------------------------------------------
# configuration for using multiple compilers
#-----------------------------------------------------------------------------
OSVER = $(shell uname -r | sed -e s/[TVX]// -e s/\\.//)

# Derive a list of SoftSDV versions dynamically from the set of
# import directories
SOFTSDV_VERSIONS = $(shell cd src/arch_$(SOFTSDV_ISA)/import>/dev/null; echo v*)

# Pick one representative version for building .depends files.
# Doesn't really matter which version we pick.
SOFTSDV_DEFAULT = $(shell cd src/arch_$(SOFTSDV_ISA)/import>/dev/null; ls -1d v* | tail -1)

INCLUDES = -I$(GNUDIR) $(ASIM_INCDIRS) -I.

##
## Files to be compiled.  Asim and SoftSDV may use different compilers.
## Separate the compilations.  Modules used by both are compiled twice.
##
CXX_SOFTSDV_NAMES = softsdv_io cpuapi_interface lockstep md5
CXX_SOFTSDV_OBJS := $(addsuffix .dummy, $(CXX_SOFTSDV_NAMES))
CXX_SOFTSDV_OOBJS := $(addprefix obj_s/, $(CXX_SOFTSDV_OBJS))

##
## ISA specific components
##
CXX_SOFTSDV_ISA_NAMES = arch_$(SOFTSDV_ISA)/cpuapi_$(SOFTSDV_ISA) arch_$(SOFTSDV_ISA)/lockstep_$(SOFTSDV_ISA)
CXX_SOFTSDV_ISA_OBJS := $(addsuffix .dummy, $(CXX_SOFTSDV_ISA_NAMES))
CXX_SOFTSDV_ISA_OOBJS := $(addprefix obj_s/, $(CXX_SOFTSDV_ISA_OBJS))

CXX_ASIM_NAMES = softsdv_io
CXX_ASIM_OBJS := $(addsuffix .o, $(CXX_ASIM_NAMES))
CXX_ASIM_OOBJS := $(addprefix obj_a/, $(CXX_ASIM_OBJS))

CXXOOBJS = $(CXX_SOFTSDV_OOBJS) $(CXX_ASIM_OOBJS)

#-----------------------------------------------------------------------------
# compilation options
#-----------------------------------------------------------------------------

CFLAGS += -fPIC -DLINUX

#CFLAGS coming from Makefile.config has -m32 flag set which gcc 2.95.3 does not like
CFLAGS_1 = $(WFLAGS) $(OFLAGS) $(DBGFLAGS) $(CPLRFLAGS) $(HFLAGS) $(HINCS) \
         $(STATFLAGS) $(XMLCFLAGS) $(TPCFLAGS) \
         $(LOCAL_CFLAGS) $(COMMON_INCDIR) -fPIC -DLINUX

#-----------------------------------------------------------------------------
# build rules
#-----------------------------------------------------------------------------
.PHONY: all
all : dirs $(TARGET)

softsdv_support_$(SOFTSDV_ISA).a: $(CXXOOBJS) $(CXX_SOFTSDV_ISA_OOBJS) \
           $(BUILDROOT)/softsdv/libasim_softsdv_stub_$(SOFTSDV_ISA)
	rm -rf $@
	ar -q $@ $(CXX_ASIM_OOBJS)

# generate both .o files and .d files for #include dependencies;
# we create all .o file in a separate obj_a/ and obj_s directories;
# we move the .d files into a separate .depend/ directory;
# Note1: Ccache compilations leave the .d in . so we move it to obj
# Note2: SoftSDV compilations artificially depend on Asim compilations
#        to avoid file name clashes of .d or temporary files during
#        compilation.


#
# Build all active versions of SoftSDV stubs simultaneously.  That way a
# user doesn't have to know which version of the stub to use for a given
# workload.  Each workload may use a different version of SoftSDV.
# SoftSDV versions will choose the correct interface file.
#

$(CXX_SOFTSDV_OOBJS) $(CXX_SOFTSDV_ISA_OOBJS): obj_s/%.dummy: %.cpp $(CXX_ASIM_OOBJS)
	for ver in $(SOFTSDV_VERSIONS); do src/arch_$(SOFTSDV_ISA)/import/$${ver}/build_g++ $(MKDEPEND) -c -o obj_s/$${ver}/$(@F:.dummy=.o) -Isrc/arch_$(SOFTSDV_ISA)/import/$${ver} $(CFLAGS_1) -DBUILDABSROOT=$(BUILDABSROOT) -DSOFTSDV_STUB $(INCLUDES) $<; if [ $$? != 0 ]; then exit 1; fi; done
	@sed -e 's#^obj_s/[^/]*/\([^/]*\)\.o:#$@:#' obj_s/$(SOFTSDV_DEFAULT)/$(@F:.dummy=.d) > .depend/s_$(notdir $(basename $@)).d
	@rm -f obj_s/$(SOFTSDV_DEFAULT)/$(@F:.dummy=.d)
	@touch $@

$(BUILDROOT)/softsdv/libasim_softsdv_stub_$(SOFTSDV_ISA): $(CXX_SOFTSDV_OOBJS) $(CXX_SOFTSDV_ISA_OOBJS)
	for ver in $(SOFTSDV_VERSIONS); do src/arch_$(SOFTSDV_ISA)/import/$${ver}/build_g++ -shared -o $@_$${ver}.so $(CFLAGS_1) obj_s/$${ver}/*.o -Lsrc -lc; if [ $$? != 0 ]; then exit 1; fi; done
	@if [ "$(SOFTSDV_ISA)" = "ipf" ]; then cd $(BUILDROOT)/softsdv; rm -f libasim_softsdv_stub.so; ln -s libasim_softsdv_stub_ipf_v20030312_0.so libasim_softsdv_stub.so; fi
	touch $@


$(CXX_ASIM_OOBJS): obj_a/%.o: %.cpp
	$(CXX) $(MKDEPEND) -c -o $@ $(CFLAGS) -DBUILDABSROOT=$(BUILDABSROOT) $(INCLUDES) $<
	@dfile=$(notdir $(basename $@)).d; if [ -e $$dfile ]; then mv $$dfile obj_a/$$dfile; fi
	@sed -e 's#^obj_a/[^/]*/\([^/]*\)\.o:#$@:#' $(DEPEND_FILE) > .depend/a_$(notdir $(basename $@)).d
	@rm -f $(DEPEND_FILE)


#-----------------------------------------------------------------------------
# utility rules
#-----------------------------------------------------------------------------

SOFTSDV_OBJ_DIRS := $(foreach DIR, $(SOFTSDV_VERSIONS), obj_s/$(DIR))

.PHONY: dirs
dirs: .depend obj_a obj_s/arch_$(SOFTSDV_ISA) $(SOFTSDV_OBJ_DIRS) $(BUILDROOT)/softsdv
.depend obj_a obj_s/arch_$(SOFTSDV_ISA) $(SOFTSDV_OBJ_DIRS) $(BUILDROOT)/softsdv:
	@mkdir -p $@

.PHONY: clean
clean :
	@rm -rf $(BUILDROOT)/softsdv
	@rm -rf obj_a
	@rm -rf obj_s
	@rm -rf .depend
	@rm -rf cxx_repository

.PHONY: realclean
realclean : clean
	rm -f $(TARGET)

.PHONY: nuke
nuke :  realclean
	rm -rf *

install:
	

#-----------------------------------------------------------------------------
# include all generated dependencies (unless *clean* goal)
#-----------------------------------------------------------------------------
ifneq ($(findstring clean, $(MAKECMDGOALS)), clean)
-include .depend/*.d
endif
