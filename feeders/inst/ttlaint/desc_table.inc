/*
 * Copyright (C) 2001-2006 Intel Corporation
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 * 
 */ 

{"bogus", bogus_f, 0},
{"gentrap", gentrap_f, 0},
{"rduniq", rduniq_f, 0},
{"wruniq", wruniq_f, 0},
{"bpt", bpt_f, 0},
{"bugchk", bugchk_f, 0},
{"chmk", chmk_f, E_SYSCALL},
{"callsys", callsys_f, E_SYSCALL},
{"imb", imb_f, 0},
{"halt", halt_f, 0},
{"draina", draina_f, 0},
{"nphalt", nphalt_f, 0},
{"cobratt", cobratt_f, 0},
{"cserve", cserve_f, 0},
{"ipir", ipir_f, 0},
{"cflush", cflush_f, 0},
{"rti", rti_f, 0},
{"rtsys", rtsys_f, 0},
{"whami", whami_f, 0},
{"rdusp", rdusp_f, 0},
{"wrperfmon", wrperfmon_f, 0},
{"wrusp", wrusp_f, 0},
{"wrkgp", wrkgp_f, 0},
{"rdps", rdps_f, 0},
{"swpipl", swpipl_f, 0},
{"wrent", wrent_f, 0},
{"tbi", tbi_f, 0},
{"rdval", rdval_f, 0},
{"wrval", wrval_f, 0},
{"swpctx", swpctx_f, 0},
{"jtopal", jtopal_f, 0},
{"wrvptptr", wrvptptr_f, 0},
{"wrfen", wrfen_f, 0},
{"mtpr-mces", mtpr_mces_f, 0},
{"opc01", opc01_f, 0},
{"opc02", opc02_f, 0},
{"opc03", opc03_f, 0},
{"opc04", opc04_f, 0},
{"opc05", opc05_f, 0},
{"opc06", opc06_f, 0},
{"opc07", opc07_f, 0},
{"lda", lda_f, 0},
{"ldah", ldah_f, 0},
{"ldb", ldb_f, E_READ},
{"ldq-u", ldq_u_f, E_READ},
{"ldw", ldw_f, E_READ},
{"stw", stw_f, E_WRITE},
{"stb", stb_f, E_WRITE},
{"stq-u", stq_u_f, E_WRITE},
{"addl", addl_f, 0},
{"s4addl", s4addl_f, 0},
{"subl", subl_f, 0},
{"s4subl", s4subl_f, 0},
#ifdef NEW_MVI
{"cmpwge", cmpwge_f, 0},
#endif
{"cmpbge", cmpbge_f, 0},
{"s8addl", s8addl_f, 0},
{"s8subl", s8subl_f, 0},
{"cmpult", cmpult_f, 0},
{"addq", addq_f, 0},
{"s4addq", s4addq_f, 0},
{"subq", subq_f, 0},
{"s4subq", s4subq_f, 0},
{"cmpeq", cmpeq_f, 0},
{"s8addq", s8addq_f, 0},
{"s8subq", s8subq_f, 0},
{"cmpule", cmpule_f, 0},
{"addlv", addlv_f, 0},
{"sublv", sublv_f, 0},
{"cmplt", cmplt_f, 0},
{"addqv", addqv_f, 0},
{"subqv", subqv_f, 0},
{"cmple", cmple_f, 0},
{"and", and_f, 0},
{"bic", bic_f, 0},
{"cmovlbs", cmovlbs_f, E_CMOV},
{"cmovlbc", cmovlbc_f, E_CMOV},
{"bis", bis_f, 0},
{"cmoveq", cmoveq_f, E_CMOV},
{"cmovne", cmovne_f, E_CMOV},
{"ornot", ornot_f, 0},
{"xor", xor_f, 0},
{"cmovlt", cmovlt_f, E_CMOV},
{"cmovge", cmovge_f, E_CMOV},
{"eqv", eqv_f, 0},
{"amask", amask_f, 0},
{"cmovle", cmovle_f, E_CMOV},
{"cmovgt", cmovgt_f, E_CMOV},
{"implver", implver_f, 0},
{"mskbl", mskbl_f, 0},
{"extbl", extbl_f, 0},
{"insbl", insbl_f, 0},
{"mskwl", mskwl_f, 0},
{"extwl", extwl_f, 0},
{"inswl", inswl_f, 0},
{"mskll", mskll_f, 0},
{"extll", extll_f, 0},
{"insll", insll_f, 0},
{"zap", zap_f, 0},
{"zapnot", zapnot_f, 0},
{"mskql", mskql_f, 0},
{"srl", srl_f, 0},
{"extql", extql_f, 0},
{"sll", sll_f, 0},
{"insql", insql_f, 0},
{"sra", sra_f, 0},
{"mskwh", mskwh_f, 0},
{"inswh", inswh_f, 0},
{"extwh", extwh_f, 0},
{"msklh", msklh_f, 0},
{"inslh", inslh_f, 0},
{"extlh", extlh_f, 0},
{"mskqh", mskqh_f, 0},
{"insqh", insqh_f, 0},
{"extqh", extqh_f, 0},
{"mull", mull_f, 0},
{"mulq", mulq_f, 0},
{"umulh", umulh_f, 0},
{"mullv", mullv_f, 0},
{"mulqv", mulqv_f, 0},
{"opc14", opc14_f, 0},
{"addfc", addfc_f, 0},
{"subfc", subfc_f, 0},
{"mulfc", mulfc_f, 0},
{"divfc", divfc_f, 0},
{"cvtdgc", cvtdgc_f, 0},
{"addgc", addgc_f, 0},
{"subgc", subgc_f, 0},
{"mulgc", mulgc_f, 0},
{"divgc", divgc_f, 0},
{"cvtgfc", cvtgfc_f, 0},
{"cvtgdc", cvtgdc_f, 0},
{"cvtgqc", cvtgqc_f, 0},
{"cvtqfc", cvtqfc_f, 0},
{"cvtqgc", cvtqgc_f, 0},
{"addf", addf_f, 0},
{"subf", subf_f, 0},
{"mulf", mulf_f, 0},
{"divf", divf_f, 0},
{"cvtdg", cvtdg_f, 0},
{"addg", addg_f, 0},
{"subg", subg_f, 0},
{"mulg", mulg_f, 0},
{"divg", divg_f, 0},
{"cmpgeq", cmpgeq_f, 0},
{"cmpglt", cmpglt_f, 0},
{"cmpgle", cmpgle_f, 0},
{"cvtgf", cvtgf_f, 0},
{"cvtgd", cvtgd_f, 0},
{"cvtgq", cvtgq_f, 0},
{"cvtqf", cvtqf_f, 0},
{"cvtqg", cvtqg_f, 0},
{"addfuc", addfuc_f, 0},
{"subfuc", subfuc_f, 0},
{"mulfuc", mulfuc_f, 0},
{"divfuc", divfuc_f, 0},
{"cvtdguc", cvtdguc_f, 0},
{"addguc", addguc_f, 0},
{"subguc", subguc_f, 0},
{"mulguc", mulguc_f, 0},
{"divguc", divguc_f, 0},
{"cvtgfuc", cvtgfuc_f, 0},
{"cvtgduc", cvtgduc_f, 0},
{"cvtgqvc", cvtgqvc_f, 0},
{"addfu", addfu_f, 0},
{"subfu", subfu_f, 0},
{"mulfu", mulfu_f, 0},
{"divfu", divfu_f, 0},
{"cvtdgu", cvtdgu_f, 0},
{"addgu", addgu_f, 0},
{"subgu", subgu_f, 0},
{"mulgu", mulgu_f, 0},
{"divgu", divgu_f, 0},
{"cvtgfu", cvtgfu_f, 0},
{"cvtgdu", cvtgdu_f, 0},
{"cvtgqv", cvtgqv_f, 0},
{"addfsc", addfsc_f, 0},
{"subfsc", subfsc_f, 0},
{"mulfsc", mulfsc_f, 0},
{"divfsc", divfsc_f, 0},
{"cvtdgsc", cvtdgsc_f, 0},
{"addgsc", addgsc_f, 0},
{"subgsc", subgsc_f, 0},
{"mulgsc", mulgsc_f, 0},
{"divgsc", divgsc_f, 0},
{"cvtgfsc", cvtgfsc_f, 0},
{"cvtgdsc", cvtgdsc_f, 0},
{"cvtgqsc", cvtgqsc_f, 0},
{"addfs", addfs_f, 0},
{"subfs", subfs_f, 0},
{"mulfs", mulfs_f, 0},
{"divfs", divfs_f, 0},
{"cvtdgs", cvtdgs_f, 0},
{"addgs", addgs_f, 0},
{"subgs", subgs_f, 0},
{"mulgs", mulgs_f, 0},
{"divgs", divgs_f, 0},
{"cmpgeqs", cmpgeqs_f, 0},
{"cmpglts", cmpglts_f, 0},
{"cmpgles", cmpgles_f, 0},
{"cvtgfs", cvtgfs_f, 0},
{"cvtgds", cvtgds_f, 0},
{"cvtgqs", cvtgqs_f, 0},
{"addfsuc", addfsuc_f, 0},
{"subfsuc", subfsuc_f, 0},
{"mulfsuc", mulfsuc_f, 0},
{"divfsuc", divfsuc_f, 0},
{"cvtdgsuc", cvtdgsuc_f, 0},
{"addgsuc", addgsuc_f, 0},
{"subgsuc", subgsuc_f, 0},
{"mulgsuc", mulgsuc_f, 0},
{"divgsuc", divgsuc_f, 0},
{"cvtgfsuc", cvtgfsuc_f, 0},
{"cvtgdsuc", cvtgdsuc_f, 0},
{"cvtgqsvc", cvtgqsvc_f, 0},
{"addfsu", addfsu_f, 0},
{"subfsu", subfsu_f, 0},
{"mulfsu", mulfsu_f, 0},
{"divfsu", divfsu_f, 0},
{"cvtdgsu", cvtdgsu_f, 0},
{"addgsu", addgsu_f, 0},
{"subgsu", subgsu_f, 0},
{"mulgsu", mulgsu_f, 0},
{"divgsu", divgsu_f, 0},
{"cvtgfsu", cvtgfsu_f, 0},
{"cvtgdsu", cvtgdsu_f, 0},
{"cvtgqsv", cvtgqsv_f, 0},
{"addsc", addsc_f, 0},
{"subsc", subsc_f, 0},
{"mulsc", mulsc_f, 0},
{"divsc", divsc_f, 0},
{"sqrtsc", sqrts_f, 0},
{"addtc", addtc_f, 0},
{"subtc", subtc_f, 0},
{"multc", multc_f, 0},
{"divtc", divtc_f, 0},
{"sqrttc", sqrtt_f, 0},
{"cvttsc", cvttsc_f, 0},
{"cvttqc", cvttqc_f, 0},
{"cvtqsc", cvtqsc_f, 0},
{"cvtqtc", cvtqtc_f, 0},
{"addsm", addsm_f, 0},
{"subsm", subsm_f, 0},
{"mulsm", mulsm_f, 0},
{"divsm", divsm_f, 0},
{"sqrtsm", sqrts_f, 0},
{"addtm", addtm_f, 0},
{"subtm", subtm_f, 0},
{"multm", multm_f, 0},
{"divtm", divtm_f, 0},
{"sqrttm", sqrtt_f, 0},
{"cvttsm", cvttsm_f, 0},
{"cvttqm", cvttqm_f, 0},
{"cvtqsm", cvtqsm_f, 0},
{"cvtqtm", cvtqtm_f, 0},
{"adds", adds_f, 0},
{"subs", subs_f, 0},
{"muls", muls_f, 0},
{"divs", divs_f, 0},
{"sqrts", sqrts_f, 0},
{"addt", addt_f, 0},
{"subt", subt_f, 0},
{"mult", mult_f, 0},
{"divt", divt_f, 0},
{"sqrtt", sqrtt_f, 0},
{"cmptun", cmptun_f, 0},
{"cmpteq", cmpteq_f, 0},
{"cmptlt", cmptlt_f, 0},
{"cmptle", cmptle_f, 0},
{"cvtts", cvtts_f, 0},
{"cvttq", cvttq_f, 0},
{"cvtqs", cvtqs_f, 0},
{"cvtqt", cvtqt_f, 0},
{"addsd", addsd_f, 0},
{"subsd", subsd_f, 0},
{"mulsd", mulsd_f, 0},
{"divsd", divsd_f, 0},
{"sqrtsd", sqrts_f, 0},
{"addtd", addtd_f, 0},
{"subtd", subtd_f, 0},
{"multd", multd_f, 0},
{"divtd", divtd_f, 0},
{"sqrttd", sqrtt_f, 0},
{"cvttsd", cvttsd_f, 0},
{"cvttqd", cvttqd_f, 0},
{"cvtqsd", cvtqsd_f, 0},
{"cvtqtd", cvtqtd_f, 0},
{"addsuc", addsuc_f, 0},
{"subsuc", subsuc_f, 0},
{"mulsuc", mulsuc_f, 0},
{"divsuc", divsuc_f, 0},
{"sqrtsuc", sqrts_f, 0},
{"addtuc", addtuc_f, 0},
{"subtuc", subtuc_f, 0},
{"multuc", multuc_f, 0},
{"divtuc", divtuc_f, 0},
{"sqrttuc", sqrtt_f, 0},
{"cvttsuc", cvttsuc_f, 0},
{"cvttqvc", cvttqvc_f, 0},
{"addsum", addsum_f, 0},
{"subsum", subsum_f, 0},
{"mulsum", mulsum_f, 0},
{"divsum", divsum_f, 0},
{"sqrtsum", sqrts_f, 0},
{"addtum", addtum_f, 0},
{"subtum", subtum_f, 0},
{"multum", multum_f, 0},
{"divtum", divtum_f, 0},
{"sqrttum", sqrtt_f, 0},
{"cvttsum", cvttsum_f, 0},
{"cvttqvm", cvttqvm_f, 0},
{"addsu", addsu_f, 0},
{"subsu", subsu_f, 0},
{"mulsu", mulsu_f, 0},
{"divsu", divsu_f, 0},
{"sqrtsu", sqrts_f, 0},
{"addtu", addtu_f, 0},
{"subtu", subtu_f, 0},
{"multu", multu_f, 0},
{"divtu", divtu_f, 0},
{"sqrttu", sqrtt_f, 0},
{"cvttsu", cvttsu_f, 0},
{"cvttqv", cvttqv_f, 0},
{"addsud", addsud_f, 0},
{"subsud", subsud_f, 0},
{"mulsud", mulsud_f, 0},
{"divsud", divsud_f, 0},
{"sqrtsud", sqrts_f, 0},
{"addtud", addtud_f, 0},
{"subtud", subtud_f, 0},
{"multud", multud_f, 0},
{"divtud", divtud_f, 0},
{"sqrttud", sqrtt_f, 0},
{"cvttsud", cvttsud_f, 0},
{"cvttqvd", cvttqvd_f, 0},
{"cvtst", cvtst_f, 0},
{"cvtsts", cvtsts_f, 0},
{"addssuc", addssuc_f, 0},
{"subssuc", subssuc_f, 0},
{"mulssuc", mulssuc_f, 0},
{"divssuc", divssuc_f, 0},
{"sqrtssuc", sqrts_f, 0},
{"addtsuc", addtsuc_f, 0},
{"subtsuc", subtsuc_f, 0},
{"multsuc", multsuc_f, 0},
{"divtsuc", divtsuc_f, 0},
{"sqrttsuc", sqrtt_f, 0},
{"cvttssuc", cvttssuc_f, 0},
{"cvttqsvc", cvttqsvc_f, 0},
{"addssum", addssum_f, 0},
{"subssum", subssum_f, 0},
{"mulssum", mulssum_f, 0},
{"divssum", divssum_f, 0},
{"sqrtssum", sqrts_f, 0},
{"addtsum", addtsum_f, 0},
{"subtsum", subtsum_f, 0},
{"multsum", multsum_f, 0},
{"divtsum", divtsum_f, 0},
{"sqrttsum", sqrtt_f, 0},
{"cvttssum", cvttssum_f, 0},
{"cvttqsvm", cvttqsvm_f, 0},
{"addssu", addssu_f, 0},
{"subssu", subssu_f, 0},
{"mulssu", mulssu_f, 0},
{"divssu", divssu_f, 0},
{"sqrtssu", sqrts_f, 0},
{"addtsu", addtsu_f, 0},
{"subtsu", subtsu_f, 0},
{"multsu", multsu_f, 0},
{"divtsu", divtsu_f, 0},
{"sqrttsu", sqrtt_f, 0},
{"cmptunsu", cmptunsu_f, 0},
{"cmpteqsu", cmpteqsu_f, 0},
{"cmptltsu", cmptltsu_f, 0},
{"cmptlesu", cmptlesu_f, 0},
{"cvttssu", cvttssu_f, 0},
{"cvttqsv", cvttqsv_f, 0},
{"addssud", addssud_f, 0},
{"subssud", subssud_f, 0},
{"mulssud", mulssud_f, 0},
{"divssud", divssud_f, 0},
{"sqrtssud", sqrts_f, 0},
{"addtsud", addtsud_f, 0},
{"subtsud", subtsud_f, 0},
{"multsud", multsud_f, 0},
{"divtsud", divtsud_f, 0},
{"sqrttsud", sqrtt_f, 0},
{"cvttssud", cvttssud_f, 0},
{"cvttqsvd", cvttqsvd_f, 0},
/* {"cvttss", cvttss_f, 0}, removed - see fpoper.c */
{"addssuic", addssuic_f, 0},
{"subssuic", subssuic_f, 0},
{"mulssuic", mulssuic_f, 0},
{"divssuic", divssuic_f, 0},
{"sqrtssuic", sqrts_f, 0},
{"addtsuic", addtsuic_f, 0},
{"subtsuic", subtsuic_f, 0},
{"multsuic", multsuic_f, 0},
{"divtsuic", divtsuic_f, 0},
{"sqrttsuic", sqrtt_f, 0},
{"cvttssuic", cvttssuic_f, 0},
{"cvttqsvic", cvttqsvic_f, 0},
{"cvtqssuic", cvtqssuic_f, 0},
{"cvtqtsuic", cvtqtsuic_f, 0},
{"addssuim", addssuim_f, 0},
{"subssuim", subssuim_f, 0},
{"mulssuim", mulssuim_f, 0},
{"divssuim", divssuim_f, 0},
{"sqrtssuim", sqrts_f, 0},
{"addtsuim", addtsuim_f, 0},
{"subtsuim", subtsuim_f, 0},
{"multsuim", multsuim_f, 0},
{"divtsuim", divtsuim_f, 0},
{"sqrttsuim", sqrtt_f, 0},
{"cvttssuim", cvttssuim_f, 0},
{"cvttqsvim", cvttqsvim_f, 0},
{"cvtqssuim", cvtqssuim_f, 0},
{"cvtqtsuim", cvtqtsuim_f, 0},
{"addssui", addssui_f, 0},
{"subssui", subssui_f, 0},
{"mulssui", mulssui_f, 0},
{"divssui", divssui_f, 0},
{"sqrtssui", sqrts_f, 0},
{"addtsui", addtsui_f, 0},
{"subtsui", subtsui_f, 0},
{"multsui", multsui_f, 0},
{"divtsui", divtsui_f, 0},
{"sqrttsui", sqrtt_f, 0},
{"cvttssui", cvttssui_f, 0},
{"cvttqsvi", cvttqsvi_f, 0},
{"cvtqssui", cvtqssui_f, 0},
{"cvtqtsui", cvtqtsui_f, 0},
{"addssuid", addssuid_f, 0},
{"subssuid", subssuid_f, 0},
{"mulssuid", mulssuid_f, 0},
{"divssuid", divssuid_f, 0},
{"sqrtssuid", sqrts_f, 0},
{"addtsuid", addtsuid_f, 0},
{"subtsuid", subtsuid_f, 0},
{"multsuid", multsuid_f, 0},
{"divtsuid", divtsuid_f, 0},
{"sqrttsuid", sqrtt_f, 0},
{"cvttssuid", cvttssuid_f, 0},
{"cvttqsvid", cvttqsvid_f, 0},
{"cvtqssuid", cvtqssuid_f, 0},
{"cvtqtsuid", cvtqtsuid_f, 0},
{"cvtlq", cvtlq_f, 0},
{"cpys", cpys_f, 0},
{"cpysn", cpysn_f, 0},
{"cpyse", cpyse_f, 0},
{"mt-fpcr", mt_fpcr_f, 0},
{"mf-fpcr", mf_fpcr_f, 0},
{"fcmoveq", fcmoveq_f, E_CMOV},
{"fcmovne", fcmovne_f, E_CMOV},
{"fcmovlt", fcmovlt_f, E_CMOV},
{"fcmovge", fcmovge_f, E_CMOV},
{"fcmovle", fcmovle_f, E_CMOV},
{"fcmovgt", fcmovgt_f, E_CMOV},
{"cvtql", cvtql_f, 0},
{"cvtqlv", cvtqlv_f, 0},
{"cvtqlsv", cvtqlsv_f, 0},
{"trapb", trapb_f, 0},
{"excb", excb_f, 0},
{"mb", mb_f, E_BARRIER},
{"wmb", wmb_f, 0},
{"fetch", fetch_f, 0},
{"fetch-m", fetch_m_f, 0},
{"rpcc", rpcc_f, 0},
{"rc", rc_f, 0},
{"rs", rs_f, 0},
{"ecb", ecb_f, E_CACHEOP},
{"wh64", wh64_f, E_WRITE|E_CACHEOP},
{"wh64en", wh64en_f, E_WRITE|E_CACHEOP},
{"pal19", pal19_f, 0},
{"jmp", jmp_f, E_JMP},
{"jsr", jsr_f, E_JSR},
{"ret", ret_f, E_RET},
{"jsr-coroutine", jsr_coroutine_f, E_JMP},
{"pal1b", pal1b_f, E_READ},	/* HW_LD */
{"pal1d", pal1d_f, 0},
{"pal1e", pal1e_f, 0},
{"pal1f", pal1f_f, 0},
{"ldf", ldf_f, E_READ|E_FLOAT},
{"ldg", ldg_f, E_READ|E_FLOAT},
{"lds", lds_f, E_READ|E_FLOAT},
{"ldt", ldt_f, E_READ|E_FLOAT},
{"stf", stf_f, E_WRITE|E_FLOAT},
{"stg", stg_f, E_WRITE|E_FLOAT},
{"sts", sts_f, E_WRITE|E_FLOAT},
{"stt", stt_f, E_WRITE|E_FLOAT},
{"ldl", ldl_f, E_READ},
{"ldq", ldq_f, E_READ},
{"ldl-l", ldl_l_f,E_LD_L},
{"ldq-l", ldq_l_f, E_LD_L},
{"stl", stl_f, E_WRITE},
{"stq", stq_f, E_WRITE},
{"stl-c", stl_c_f, E_ST_C},
{"stq-c", stq_c_f, E_ST_C},
{"br", br_f, E_BR},
{"fbeq", fbeq_f, E_CONDBR|E_FLOAT},
{"fblt", fblt_f, E_CONDBR|E_FLOAT},
{"fble", fble_f, E_CONDBR|E_FLOAT},
{"bsr", bsr_f, E_BSR},
{"fbne", fbne_f, E_CONDBR|E_FLOAT},
{"fbge", fbge_f, E_CONDBR|E_FLOAT},
{"fbgt", fbgt_f, E_CONDBR|E_FLOAT},
{"blbc", blbc_f, E_CONDBR},
{"beq", beq_f, E_CONDBR},
{"blt", blt_f, E_CONDBR},
{"ble", ble_f, E_CONDBR},
{"blbs", blbs_f, E_CONDBR},
{"bne", bne_f, E_CONDBR},
{"bge", bge_f, E_CONDBR},
{"bgt", bgt_f, E_CONDBR},
{"itofs", itofs_f, 0},
{"itoff", itoff_f, 0},
{"itoft", itoft_f, 0},
{"sextb", sextb_f, 0},
{"sextw", sextw_f, 0},
{"perr", perr_f, 0},
{"minub8", minub8_f, 0},
{"minsb8", minsb8_f, 0},
{"minuw4", minuw4_f, 0},
{"minsw4", minsw4_f, 0},
{"maxub8", maxub8_f, 0},
{"maxsb8", maxsb8_f, 0},
{"maxuw4", maxuw4_f, 0},
{"maxsw4", maxsw4_f, 0},
{"pklb", pklb_f, 0},
{"pkwb", pkwb_f, 0},
{"unpkbl", unpkbl_f, 0},
{"unpkbw", unpkbw_f, 0},
{"ctpop", ctpop_f, 0},
{"ctlz", ctlz_f, 0},
{"cttz", cttz_f, 0},
{"ftois", ftois_f, 0},
{"ftoit", ftoit_f, 0},

#ifdef NEW_MVI
{"paddsb8", paddsb8_f, 0},
{"paddsw4", paddsw4_f, 0},
{"paddub8", paddub8_f, 0},
{"padduw4", padduw4_f, 0},

{"psubsb8", psubsb8_f, 0},
{"psubsw4", psubsw4_f, 0},
{"psubub8", psubub8_f, 0},
{"psubuw4", psubuw4_f, 0},

{"pmulluw4", pmulluw4_f, 0},
{"pmulhuw4", pmulhuw4_f, 0},
{"pminmaxsl2", pminmaxsl2_f, 0},
{"pminmaxul2", pminmaxul2_f, 0},

{"pminmaxsb8", pminmaxsb8_f, 0},
{"pminmaxsw4", pminmaxsw4_f, 0},
{"pminmaxub8", pminmaxub8_f, 0},
{"pminmaxuw4", pminmaxuw4_f, 0},

{"taddsb8", taddsb8_f, 0},
{"taddsw4", taddsw4_f, 0},
{"taddub8", taddub8_f, 0},
{"tadduw4", tadduw4_f, 0},

{"tsubsb8", tsubsb8_f, 0},
{"tsubsw4", tsubsw4_f, 0},
{"tsubub8", tsubub8_f, 0},
{"tsubuw4", tsubuw4_f, 0},

{"tmulsb8", tmulsb8_f, 0},
{"tmulsw4", tmulsw4_f, 0},
{"tmulub8", tmulub8_f, 0},
{"tmuluw4", tmuluw4_f, 0},
{"tmulusb8", tmulusb8_f, 0},
{"tmulusw4", tmulusw4_f, 0},

{"psll2", psll2_f, 0},

{"psrb8", psrb8_f, 0},
{"psrw4", psrw4_f, 0},
{"pslb8", pslb8_f, 0},
{"pslw4", pslw4_f, 0},

{"psrl2",  psrl2_f,  0},
{"psral2", psral2_f, 0},
{"psrab8", psrab8_f, 0},
{"psraw4", psraw4_f, 0},

{"pkswb8", pkswb8_f, 0},
{"pkslw4", pkslw4_f, 0},
{"pkuwb8", pkuwb8_f, 0},
{"pkulw4", pkulw4_f, 0},

{"upksbw4", upksbw4_f, 0},
{"upkswl2", upkswl2_f, 0},
{"upkubw4", upkubw4_f, 0},
{"upkuwl2", upkuwl2_f, 0},

{"tabserrsb8", tabserrsb8_f, 0},
{"tabserrub8", tabserrub8_f, 0},
{"tabserrsw4", tabserrsw4_f, 0},
{"tabserruw4", tabserruw4_f, 0},

{"tsqerrsb8", tsqerrsb8_f, 0},
{"tsqerrub8", tsqerrub8_f, 0},
{"tsqerrsw4", tsqerrsw4_f, 0},
{"tsqerruw4", tsqerruw4_f, 0},

{"permb8", permb8_f, 0},
{"gpkblb4", gpkblb4_f, 0},

{"paddsl2", paddsl2_f, 0},
{"paddul2", paddul2_f, 0},
{"psubsl2", psubsl2_f, 0},
{"psubul2", psubul2_f, 0},

{"padd", 	padd_f, 	0},
{"psub", 	psub_f, 	0},
{"paddc", 	paddc_f, 	0},
{"psubc", 	psubc_f, 	0},
{"phadd", 	phadd_f, 	0},
{"phsub", 	phsub_f, 	0},
{"phsubr", 	phsubr_f, 	0},

{"pmul", 	pmul_f, 	0},
{"pmull", 	pmull_f, 	0},
{"pmulls", 	pmulls_f, 	0},
{"pmulh", 	pmulh_f, 	0},
{"pmulhs", 	pmulhs_f, 	0},

{"parcpl", 	parcpl_f, 	0},
{"parcplh", 	parcplh_f, 	0},
{"parcpll", 	parcpll_f, 	0},

{"parsqrt", 	parsqrt_f, 	0},
{"parsqrth", 	parsqrth_f, 	0},
{"parsqrtl", 	parsqrtl_f, 	0},

{"pmovll", 	pmovll_f, 	0},
{"pmovlh", 	pmovlh_f, 	0},
{"pmovhl", 	pmovhl_f, 	0},
{"pmovhh", 	pmovhh_f, 	0},

{"pcpys", 	pcpys_f, 	0},
{"pcpysn", 	pcpysn_f, 	0},
{"pcpyse", 	pcpyse_f, 	0},

{"pcmpeq", 	pcmpeq_f, 	0},
{"pcmpne", 	pcmpne_f, 	0},
{"pcmplt", 	pcmplt_f, 	0},
{"pcmple", 	pcmple_f, 	0},
{"pcmpun", 	pcmpun_f, 	0},

{"pfmax", 	pfmax_f, 	0},
{"pfmin", 	pfmin_f, 	0},

{"pcvtsp", 	pcvtsp_f, 	0},

{"pextl", 	pextl_f, 	0},
{"pexth", 	pexth_f, 	0},

{"pcvtfi", 	pcvtfi_f, 	0},
#endif

#ifdef NEW_TTL
/* ---- special instructions */
{"ttl_mvtvp", 	ttl_mvtvp_f, 	0},
{"ttl_mvfvp", 	ttl_mvfvp_f, 	0},
{"ttl_vsetnvm", ttl_vsetnvm_f, 	0},
{"ttl_vsetvm",  ttl_vsetvm_f, 	0},

/* ---- "single" instructions */
{"ttl_vctlz", 	ttl_vctlz_f, 	0},
{"ttl_vcttz", 	ttl_vcttz_f, 	0},
{"ttl_vctpop", 	ttl_vctpop_f, 	0},
{"ttl_vextsl", 	ttl_vextsl_f, 	0},
{"ttl_vextsh", 	ttl_vextsh_f, 	0},
{"ttl_viota", 	ttl_viota_f, 	0},
{"ttl_vskewh", 	ttl_vskewh_f, 	0},
{"ttl_vskewl", 	ttl_vskewl_f, 	0},

/* ---- load types */
{"ttl_vldt", 	ttl_vldt_f, 	E_READ|E_FLOAT},
{"ttl_vlds", 	ttl_vlds_f, 	E_READ|E_FLOAT},
{"ttl_vldq", 	ttl_vldq_f, 	E_READ},
{"ttl_vldl", 	ttl_vldl_f, 	E_READ},

/* ---- store types */
{"ttl_vstt", 	ttl_vstt_f, 	E_WRITE|E_FLOAT},
{"ttl_vsts", 	ttl_vsts_f, 	E_WRITE|E_FLOAT},
{"ttl_vstq", 	ttl_vstq_f, 	E_WRITE},
{"ttl_vstl", 	ttl_vstl_f, 	E_WRITE},

/* gather instructions */
{"ttl_vgathq", 	ttl_vgathq_f, 	E_READ|E_GATHER},
{"ttl_vgathl", 	ttl_vgathl_f, 	E_READ|E_GATHER},
{"ttl_vgatht", 	ttl_vgatht_f, 	E_READ|E_GATHER|E_FLOAT},
{"ttl_vgaths", 	ttl_vgaths_f, 	E_READ|E_GATHER|E_FLOAT},

/* scather instructions */
{"ttl_vscatq", 	ttl_vscatq_f, 	E_WRITE|E_SCATTER},
{"ttl_vscatl", 	ttl_vscatl_f, 	E_WRITE|E_SCATTER},
{"ttl_vscatt", 	ttl_vscatt_f, 	E_WRITE|E_SCATTER|E_FLOAT},
{"ttl_vscats", 	ttl_vscats_f, 	E_WRITE|E_SCATTER|E_FLOAT},

/* non conflict gather instructions */
{"ttl_vncgathq", 	ttl_vncgathq_f, 	E_GATHER|E_READ},
{"ttl_vncgathl", 	ttl_vncgathl_f, 	E_GATHER|E_READ},
{"ttl_vncgatht", 	ttl_vncgatht_f, 	E_GATHER|E_READ|E_FLOAT},
{"ttl_vncgaths", 	ttl_vncgaths_f, 	E_GATHER|E_READ|E_FLOAT},

/* non conflict scather instructions */
{"ttl_vncscatq", 	ttl_vncscatq_f, 	E_WRITE|E_SCATTER},
{"ttl_vncscatl", 	ttl_vncscatl_f, 	E_WRITE|E_SCATTER},
{"ttl_vncscatt", 	ttl_vncscatt_f, 	E_WRITE|E_SCATTER|E_FLOAT},
{"ttl_vncscats", 	ttl_vncscats_f, 	E_WRITE|E_SCATTER|E_FLOAT},

/* ---- vector-vector aritmetic instructions */
{"ttl_vvaddt", 	ttl_vvaddt_f, 	0},
{"ttl_vvadds", 	ttl_vvadds_f, 	0},
{"ttl_vvaddq", 	ttl_vvaddq_f, 	0},
{"ttl_vvaddl", 	ttl_vvaddl_f, 	0},

{"ttl_vvsubt", 	ttl_vvsubt_f, 	0},
{"ttl_vvsubs", 	ttl_vvsubs_f, 	0},
{"ttl_vvsubq", 	ttl_vvsubq_f, 	0},
{"ttl_vvsubl", 	ttl_vvsubl_f, 	0},

{"ttl_vvmult", 	ttl_vvmult_f, 	0},
{"ttl_vvmuls", 	ttl_vvmuls_f, 	0},
{"ttl_vvmulq", 	ttl_vvmulq_f, 	0},
{"ttl_vvmull", 	ttl_vvmull_f, 	0},

{"ttl_vvdivt", 	ttl_vvdivt_f, 	0},
{"ttl_vvdivs", 	ttl_vvdivs_f, 	0},

{"ttl_vsqrtt", 	ttl_vsqrtt_f, 	0},
{"ttl_vsqrts", 	ttl_vsqrts_f, 	0},

/* ---- vector-float aritmetic instructions */
{"ttl_vsaddt", 	ttl_vsaddt_f, 	0},
{"ttl_vsadds", 	ttl_vsadds_f, 	0},

{"ttl_vssubt", 	ttl_vssubt_f, 	0},
{"ttl_vssubs", 	ttl_vssubs_f, 	0},

{"ttl_vsmult", 	ttl_vsmult_f, 	0},
{"ttl_vsmuls", 	ttl_vsmuls_f, 	0},

{"ttl_vsdivt", 	ttl_vsdivt_f, 	0},
{"ttl_vsdivs", 	ttl_vsdivs_f, 	0},

/* ---- vector-integer aritmetic instructions */
{"ttl_vsaddq", 	ttl_vsaddq_f, 	0},
{"ttl_vsaddl", 	ttl_vsaddl_f, 	0},

{"ttl_vssubq", 	ttl_vssubq_f, 	0},
{"ttl_vssubl", 	ttl_vssubl_f, 	0},

{"ttl_vsmulq", 	ttl_vsmulq_f, 	0},
{"ttl_vsmull", 	ttl_vsmull_f, 	0},

/* ---- vector-scalar logic instructions */
{"ttl_vsand", 	ttl_vsand_f, 	0},
{"ttl_vsbis", 	ttl_vsbis_f, 	0},
{"ttl_vsxor", 	ttl_vsxor_f, 	0},
{"ttl_vsbic", 	ttl_vsbic_f, 	0},
{"ttl_vsornot", ttl_vsornot_f, 	0},
{"ttl_vseqv", 	ttl_vseqv_f, 	0},

/* ---- vector-vector logic instructions */
{"ttl_vvand", 	ttl_vvand_f, 	0},
{"ttl_vvbis", 	ttl_vvbis_f, 	0},
{"ttl_vvxor", 	ttl_vvxor_f, 	0},
{"ttl_vvbic", 	ttl_vvbic_f, 	0},
{"ttl_vvornot", ttl_vvornot_f, 	0},
{"ttl_vveqv", 	ttl_vveqv_f, 	0},

/* ---- comparision instructions... */
{"ttl_vvcmpeq", 	ttl_vvcmpeq_f, 	0},
{"ttl_vvcmple", 	ttl_vvcmple_f, 	0},
{"ttl_vvcmplt", 	ttl_vvcmplt_f, 	0},
{"ttl_vscmpeq", 	ttl_vscmpeq_f, 	0},
{"ttl_vscmple", 	ttl_vscmple_f, 	0},
{"ttl_vscmplt", 	ttl_vscmplt_f, 	0},

/* -- floating comparisions */
{"ttl_vvcmpteq", 	ttl_vvcmpteq_f, 	0},
{"ttl_vvcmptle", 	ttl_vvcmptle_f, 	0},
{"ttl_vvcmptlt", 	ttl_vvcmptlt_f, 	0},
{"ttl_vvcmptun", 	ttl_vvcmptun_f, 	0},
{"ttl_vscmpteq", 	ttl_vscmpteq_f, 	0},
{"ttl_vscmptle", 	ttl_vscmptle_f, 	0},
{"ttl_vscmptlt", 	ttl_vscmptlt_f, 	0},
{"ttl_vscmptun", 	ttl_vscmptun_f, 	0},

/* -- unsigned int comparisions */
{"ttl_vvcmpule", 	ttl_vvcmpule_f, 	0},
{"ttl_vvcmpult", 	ttl_vvcmpult_f, 	0},
{"ttl_vscmpule", 	ttl_vscmpule_f, 	0},
{"ttl_vscmpult", 	ttl_vscmpult_f, 	0},

/* -- byte comparisions */
{"ttl_vvcmpbge", 	ttl_vvcmpbge_f, 	0},
{"ttl_vscmpbge", 	ttl_vscmpbge_f, 	0},

/* ---- conversion instructions */
{"ttl_vcvtqs", 	ttl_vcvtqs_f, 	0},
{"ttl_vcvtqt", 	ttl_vcvtqt_f, 	0},
{"ttl_vcvtst", 	ttl_vcvtst_f, 	0},
{"ttl_vcvttq", 	ttl_vcvttq_f, 	0},
{"ttl_vcvtts", 	ttl_vcvtts_f, 	0},

/* ---- vector-scalar extration instructions */
{"ttl_vsextbl", ttl_vsextbl_f, 	0},
{"ttl_vsextwl", ttl_vsextwl_f, 	0},
{"ttl_vsextll", ttl_vsextll_f, 	0},
{"ttl_vsextql", ttl_vsextql_f, 	0},
{"ttl_vsextwh", ttl_vsextwh_f, 	0},
{"ttl_vsextlh", ttl_vsextlh_f, 	0},
{"ttl_vsextqh", ttl_vsextqh_f, 	0},

/* ---- vector-vector extration instructions */
{"ttl_vvextbl", ttl_vvextbl_f, 	0},
{"ttl_vvextwl", ttl_vvextwl_f, 	0},
{"ttl_vvextll", ttl_vvextll_f, 	0},
{"ttl_vvextql", ttl_vvextql_f, 	0},
{"ttl_vvextwh", ttl_vvextwh_f, 	0},
{"ttl_vvextlh", ttl_vvextlh_f, 	0},
{"ttl_vvextqh", ttl_vvextqh_f, 	0},

/* ---- vector-scalar insertion instructions */
{"ttl_vsinsbl", ttl_vsinsbl_f, 	0},
{"ttl_vsinswl", ttl_vsinswl_f, 	0},
{"ttl_vsinsll", ttl_vsinsll_f, 	0},
{"ttl_vsinsql", ttl_vsinsql_f, 	0},
{"ttl_vsinswh", ttl_vsinswh_f, 	0},
{"ttl_vsinslh", ttl_vsinslh_f, 	0},
{"ttl_vsinsqh", ttl_vsinsqh_f, 	0},

/* ---- vector-vector insertion instructions */
{"ttl_vvinsbl", ttl_vvinsbl_f, 	0},
{"ttl_vvinswl", ttl_vvinswl_f, 	0},
{"ttl_vvinsll", ttl_vvinsll_f, 	0},
{"ttl_vvinsql", ttl_vvinsql_f, 	0},
{"ttl_vvinswh", ttl_vvinswh_f, 	0},
{"ttl_vvinslh", ttl_vvinslh_f, 	0},
{"ttl_vvinsqh", ttl_vvinsqh_f, 	0},

/* ---- merge instructions */
{"ttl_vvmerg", ttl_vvmerg_f, 	0},
{"ttl_vsmergq", ttl_vsmergq_f, 	0},
{"ttl_vsmergt", ttl_vsmergt_f, 	0},

/* ---- masking instructions */
{"ttl_vvmskbl",ttl_vvmskbl_f, 	0},
{"ttl_vvmskwl",ttl_vvmskwl_f, 	0},
{"ttl_vvmskll",ttl_vvmskll_f, 	0},
{"ttl_vvmskql",ttl_vvmskql_f, 	0},
{"ttl_vvmskwh",ttl_vvmskwh_f, 	0},
{"ttl_vvmsklh",ttl_vvmsklh_f, 	0},
{"ttl_vvmskqh",ttl_vvmskqh_f, 	0},

{"ttl_vsmskbl",ttl_vsmskbl_f, 	0},
{"ttl_vsmskwl",ttl_vsmskwl_f, 	0},
{"ttl_vsmskll",ttl_vsmskll_f, 	0},
{"ttl_vsmskql",ttl_vsmskql_f, 	0},
{"ttl_vsmskwh",ttl_vsmskwh_f, 	0},
{"ttl_vsmsklh",ttl_vsmsklh_f, 	0},
{"ttl_vsmskqh",ttl_vsmskqh_f, 	0},

/* ---- shifting instructions */
{"ttl_vssra",ttl_vssra_f, 	0},
{"ttl_vvsra",ttl_vvsra_f, 	0},

{"ttl_vssll",ttl_vssll_f, 	0},
{"ttl_vvsll",ttl_vvsll_f, 	0},
{"ttl_vssrl",ttl_vssrl_f, 	0},
{"ttl_vvsrl",ttl_vvsrl_f, 	0},

/* ---- scalled add/sub */
{"ttl_vs4addq",ttl_vs4addq_f, 	0},
{"ttl_vs8addq",ttl_vs8addq_f, 	0},
{"ttl_vs4addl",ttl_vs4addl_f, 	0},
{"ttl_vs8addl",ttl_vs8addl_f, 	0},

{"ttl_vs4subq",ttl_vs4subq_f, 	0},
{"ttl_vs8subq",ttl_vs8subq_f, 	0},
{"ttl_vs4subl",ttl_vs4subl_f, 	0},
{"ttl_vs8subl",ttl_vs8subl_f, 	0},

/* ---- unsigned multiply */
{"ttl_vvumulh",ttl_vvumulh_f, 	0},
{"ttl_vsumulh",ttl_vsumulh_f, 	0},

/* ---- zapping ;-) */
{"ttl_vvzap",ttl_vvzap_f, 	0},
{"ttl_vszap",ttl_vszap_f, 	0},
{"ttl_vvzapnot",ttl_vvzapnot_f, 	0},
{"ttl_vszapnot",ttl_vszapnot_f, 	0},

/* ---- misc */
{"ttl_vcmpr", ttl_vcmpr_f, 	0},
{"ttl_vsynch",ttl_vsynch_f,	0},

/* ----- prefetching instructions */
{"ttl_vldpf",ttl_vldpf_f,	E_READ|E_PREFETCH},
{"ttl_vstpf",ttl_vstpf_f,	E_WRITE|E_PREFETCH},
{"ttl_vgathpf",ttl_vgathpf_f,	E_READ|E_GATHER| E_PREFETCH},
{"ttl_vscatpf",ttl_vscatpf_f,	E_WRITE|E_SCATTER| E_PREFETCH},
{"ttl_vncgathpf",ttl_vncgathpf_f,	E_READ|E_GATHER| E_PREFETCH},
{"ttl_vncscatpf",ttl_vncscatpf_f,	E_WRITE|E_SCATTER| E_PREFETCH},

{"ttl_vdrainm0",ttl_vdrainm0_f,0},
{"ttl_vdrainm1",ttl_vdrainm1_f,0},
{"ttl_vdrainm2",ttl_vdrainm2_f,0},
{"ttl_vdrainv0",ttl_vdrainv0_f,0},
{"ttl_vdrainv1",ttl_vdrainv1_f,0},
{"ttl_vdrainv2",ttl_vdrainv2_f,0},
{"ttl_mvfvr",ttl_mvfvr_f,0},

#endif

#ifdef NEW_TLDS
{"tlds_bs", 	tlds_bs_f,      0},
{"tlds_bns", 	tlds_bns_f, 	0},
{"tlds_q",      tlds_q_f,       0},
{"tlds_arm",    tlds_arm_f,     0},
{"tlds_en",     tlds_en_f,      0},
#endif

{"nop", nop_f, 0},
  
