#
#  Copyright (C) 2001-2006 Intel Corporation
#  
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#  
#

###############################################################################
#
# This is only a local copy for test targets - not used with ASIM builds
#
# Determine configuration for other Makefiles
#
###############################################################################

#-----------------------------------------------------------------------------
# set defaults for make configuration
#
# command line options can override any of these default values, e.g.
# with "make GNU=1 OPT=1"
#-----------------------------------------------------------------------------
# use GNU compilers
ifndef GNU
  GNU=0
endif
#
# compile optimized
ifndef OPT
  OPT=0
endif
#
# include debugging code
ifndef DEBUG
  DEBUG=1
endif
#
# include profile code
ifndef PROFILE
  PROFILE=0
endif
#
# include trace code
ifndef TRACE
  TRACE=0
endif
#
# include events code
ifndef EVENTS
  EVENTS=0
endif
#
#
# static executable
ifndef STATIC
  STATIC=0
endif
#
# extensive compiler warnings
ifndef WARN
  WARN=1
endif
#
# parallel make
ifndef PAR
  PAR=1
endif
#
# host type
ifndef HOSTOS
  HOSTOS:=$(shell uname -s)
endif
ifndef HOSTMACHINE
  HOSTMACHINE:=$(shell uname -m)
endif
ifndef HOSTOSRELEASE
  HOSTOSRELEASE:=$(shell uname -r)
endif

#-----------------------------------------------------------------------------
# pick compilers: GNU or native
#-----------------------------------------------------------------------------
ifeq ($(GNU),1)
  CXX = g++
  CC = gcc
else
  CXX = cxx
  CC = cc
endif

#-----------------------------------------------------------------------------
# optimization settings
#-----------------------------------------------------------------------------
ifeq ($(OPT),1)
  ifeq ($(GNU),1)
    OFLAGS = -O3 -g -finline-functions -funroll-loops
  else
    #r2r: CU settings
    #OFLAGS = -migrate -std strict_ansi -O5 -g3
    OFLAGS = -O4 -fast -inline speed -g3
  endif
else
  ifeq ($(GNU),1)
    OFLAGS = -O0 -g 
  else
    #r2r: CU settings
    #OFLAGS = -std -O0 -g3
    OFLAGS = -O0 -g2 -ansi_alias
  endif
endif

#-----------------------------------------------------------------------------
# debug settings
#-----------------------------------------------------------------------------
ifeq ($(DEBUG),1)
  DBGFLAGS = -D_REENTRANT -DASIM_ENABLE_ASSERTIONS -DASIM_ENABLE_MM_DEBUG \
    -DASIM_ENABLE_EVENTS -DASIM_ENABLE_TRACE -DASIM_ENABLE_PROFILE \
    -DASIM_ENABLE_DISASSEMBLE 
else 
  DBGFLAGS = -D_REENTRANT -DASIM_ENABLE_ASSERTIONS 
  ifeq ($(TRACE),1)
    DBGFLAGS += -DASIM_ENABLE_TRACE
  endif
  ifeq ($(EVENTS),1)
    DBGFLAGS += -DASIM_ENABLE_EVENTS 
  endif
  ifeq ($(PROFILE),1)
    DBGFLAGS += -DASIM_ENABLE_PROFILE
  endif
endif

#-----------------------------------------------------------------------------
# static/non_shared compilation settings
#-----------------------------------------------------------------------------
ifeq ($(STATIC),1)
  ifeq ($(GNU),1)
    S_COMPILER_FLAGS = -static
  else
    # for the GEM compiler
    S_COMPILER_FLAGS = -non_shared -L/usr/lib/cmplrs/cxx -lcxx
  endif

    SLFLAGS = $(S_COMPILER_FLAGS) \
	      -L/usr/opt/alt/usr/lib/threads \
	      -L/alt_usr/lib -ldnet 
endif

#-----------------------------------------------------------------------------
# compiler warning level
#-----------------------------------------------------------------------------
ifeq ($(WARN),1)
  ifeq ($(GNU),1)
    WFLAGS = -Wall -W -Wpointer-arith -Wmissing-declarations -Wredundant-decls \
             -Wno-long-long -Wno-unused -Wno-unknown-pragmas
    # following flags cause too many warnings currently
    # WFLAGS += -std=c99 -pedantic -Wshadow -Waggregate-return -Wcast-align
  else
    WFLAGS = -w0 -msg_disable codeunreachable
  endif
else
  ifeq ($(GNU),1)
    # even non-warning level checks for format string mismatches!
    WFLAGS = -Wformat
  else
    WFLAGS = -msg_disable codeunreachable
  endif
endif

#-----------------------------------------------------------------------------
# host type specific settings
#-----------------------------------------------------------------------------
ifeq ($(HOSTOS),OSF1)
  HFLAGS = -DHOST_DUNIX
  HINCS = -I/usr/local/include
  ifeq ($(GNU),1)
    HLIBS = -L/proj/vssad/local/alpha/lib -lpthread -ltcl8.0 -ltk8.0 -lX11 -lrt -lm -lmld -lbfd -liberty -lst -lmld -lexc -lintl
  else
    HLIBS = -L/proj/vssad/local/alpha/lib -lpthread -ltcl8.0 -ltk8.0 -lX11 -lrt -lm -lmld -lbfd -liberty_gcoff -lst -lmld -lexc -lintl
    # cxx on Tru64 needs this to compile standars iostream right
    HFLAGS += -D__USE_STD_IOSTREAM
  endif
else
  ifeq ($(HOSTOS),FreeBSD)
    ifeq ($(HOSTMACHINE),i386)
      HFLAGS = -DHOST_FREEBSD_X86
    else
      HFLAGS = -DHOST_FREEBSD
    endif
    HINCS = -I/usr/X11R6/include -I/usr/local/include/tk8.0 -I/usr/local/include/tcl8.0
    HLIBS = -pthread -L/usr/local/lib -L/usr/X11R6/lib -ltcl80 -ltk80 -lX11 -lm
  else
    HFLAGS = -DHOST_LINUX -DLINUX_$(subst .,_,$(HOSTOSRELEASE))
    ifeq ($(HOSTMACHINE),i386) 
      HFLAGS = -DHOST_LINUX_X86	
    endif
    ifeq ($(HOSTMACHINE),i486) 
      HFLAGS = -DHOST_LINUX_X86	
    endif
    ifeq ($(HOSTMACHINE),i586) 
      HFLAGS = -DHOST_LINUX_X86	
    endif
    ifeq ($(HOSTMACHINE),i686) 
      HFLAGS = -DHOST_LINUX_X86	
    endif
    ifeq ($(HOSTMACHINE),ia64) 
      HFLAGS = -DHOST_LINUX_IA64
    endif
    HINCS = -I/usr/local/include
    ifeq ($(HOSTMACHINE),ia64) 
      HLIBS = -L/usr/X11R6/lib -L/proj/vssad/local/ia64_linux22/lib -lpthread -ltcl8.0 -ltk8.0 -lX11 -ldl -lm
    else
      HLIBS = -L/usr/X11R6/lib -L/proj/vssad/local/i386_linux22/lib -lpthread -ltcl8.0 -ltk8.0 -lX11 -ldl -lm
    endif
  endif
endif

#-----------------------------------------------------------------------------
# parallel make settings
#-----------------------------------------------------------------------------
ifeq ($(PAR),1)
  MKFLAGS = -j 4
else
  MKFLAGS =
endif

#-----------------------------------------------------------------------------
# generating dependency files for different compilers
#-----------------------------------------------------------------------------
ifeq ($(GNU),1)
  # GNU makes foo.d for foo.o
  DEPEND_FILE=$(basename $@).d
  # make dependencies and ignore system header files
  MKDEPEND=-MMD
else
  # GEM makes foo.o.d for foo.o
  DEPEND_FILE=$@.d
  # flag to make dependencies
  MKDEPEND=-MD
endif

#=============================================================================
#=============================================================================
# pulling it all together
#=============================================================================
#=============================================================================
CFLAGS = $(WFLAGS) $(OFLAGS) $(DBGFLAGS) $(HFLAGS) $(HINCS)
LFLAGS = $(HLIBS) $(SLFLAGS) 

